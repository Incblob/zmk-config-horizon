
#define my_tapping_term 150
#define ak_idle_term 300

#define TD_template compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>

#define     my_hrm_config \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            flavor = "balanced"; \
            hold-trigger-on-release; \
            tapping-term-ms = <my_tapping_term>; \
            quick-tap-ms = <my_quick_tapping_term>

#define     my_lk_config \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            tapping-term-ms = <my_tapping_term>; \
            flavor = "tap-preferred"


behaviors {
    as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <170>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>; 
        };

    ss: shift_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_sticky";
            #binding-cells = <2>;
            tapping_term_ms = <170>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>; 
        };

    lt_r: lt_r {
            compatible = "zmk,behavior-hold-tap";
            label = "R_LAYER";
            #binding-cells = <2>;
            tapping_term_ms = <40>;
            // quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>; 
        };

    mtg: mod_tap_game {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_GAME";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <400>;
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <1>;    // <---[[the W key]]
    };
    //
    // TAP DANCE
    //
    td_dot: td_dot {
        TD_template;
        bindings = <&mt_dot DOT DOT>
                 , <AS(DOT)>
                 , <&dotdotdot>;
    };
    
    mt_dot: mt_dot {
            my_lk_config;
            bindings = <&colon_space>, <&dot_space_cap>;
        };

    td_comma: td_comma {
        TD_template;
        bindings = <&mt_comma COMMA COMMA>
                 , <AS(COMMA)>;
    };
    mt_comma: mt_comma {
            my_lk_config;
            bindings = <&semi_space>, <&comma_space>;
        };

    td_qu: td_qu {
            TD_template;
            bindings = <&mt_qu Q U>
                    , <AS(Q)>;
        };
    
    mt_qu: mt_qu {
            my_lk_config;
            bindings = <&macro_QU_cap>, <&macro_QU>;
        };
// ----- LAYER
    // td_r: td_r{
    //     compatible = "zmk,behavior-tap-dance";
    //     #binding-cells = <0>;
    //     tapping-term-ms = <185>;
    //     bindings = <&lt_r l_L R>
    //              , <&kp LS(R)>;
    // };

    // Adaptive Keys
    ak_m: ak_m {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp M>;

        akt_gm { trigger-keys = <G>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp L>; };
        akt_xm { trigger-keys = <X>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp BSPC &kp X &kp L>; };
        akt_wm { trigger-keys = <W>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp L>; };
    };

    ak_h: ak_h {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp H>;

        akt_ah { trigger-keys = <A>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp U>; };
        akt_uh { trigger-keys = <U>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp A>; };
        akt_eh { trigger-keys = <E>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp O>; };
        akt_oh { trigger-keys = <O>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp E>; };
    };

    ak_b: ak_b {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp B>;

        akt_pb { trigger-keys = <P>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp S>; };
        akt_cb { trigger-keys = <C>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp BSPC &kp S &kp B>; };
    };

    ak_c: ak_c {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp C>;

        akt_tc { trigger-keys = <T>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp C &kp H>; };
        akt_bc { trigger-keys = <B>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp S>; };
    };

    ak_g: ak_g {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp G>;

        akt_mg { trigger-keys = <M>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp BSPC &kp L &kp G>; };
        akt_kg { trigger-keys = <K>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp L>; };
        akt_jg { trigger-keys = <J>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp P &kp G>; }; //jpg
    };

    ak_j: ak_j {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp J>;

        akt_gj { trigger-keys = <G>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp T &kp H>; };
        akt_wj { trigger-keys = <W>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp L>; };
    };

    ak_k: ak_k {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp K>;

        akt_gk { trigger-keys = <G>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp BSPC &kp L &kp K>; };
        akt_tk { trigger-keys = <T>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp BSPC &kp C &kp K >; };
    };

    ak_u: ak_u {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&kp U>;

        akt_yu { trigger-keys = <Y>; max-prior-idle-ms = <ak_idle_term>; bindings = <&kp I>; };
    };


    //
    // Digraphs
    //
    lk_th: lk_th { // Th on tap, tion on "linger"
        my_lk_config;
        bindings = <&macro_tion>, <&macro_Th>;
    };
    lk_sh: lk_sh { // Sh on tap, sion on "linger"
        my_lk_config;
        bindings = <&macro_sion>, <&macro_Sh>;
    };
    lk_gh: lk_gh { // Gh on tap, Ght on "linger"
        my_lk_config;
        bindings = <&macro_ght>, <&macro_Gh>;
    };

    //
    // linger keys
    //

};
