/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define MODTIME 25

&mt {
    tapping-term-ms = <145>;
    quick_tap_ms = <140>;
};


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
/ {

    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <MODTIME>;
            key-positions = <34 35>;
            bindings = <&mt LS(ENTER) ENTER>;
            layers = <0>;
        };
        combo_ctl_bsp {
            timeout-ms = <MODTIME>;
            key-positions = <33 34>;
            bindings = <&kp LC(BSPC) >;
            layers = <0>;
        };
        combo_end {
            timeout-ms = <MODTIME>;
            key-positions = <20 21>;
            bindings = <&kp END>;
            layers = <0>;
        };
        combo_home {
            timeout-ms = <MODTIME>;
            key-positions = <19 20>;
            bindings = <&kp HOME>;
            layers = <0>;
        }; 
    };
};
/{
    macros {
        line_select: line_select {
            compatible = "zmk,behavior-macro";
            label = "line_select";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <60>;
            bindings = < &kp HOME &kp LS(END)>;
        };
       
    };

    behaviors {
        as: auto_shift {
                compatible = "zmk,behavior-hold-tap";
                label = "AUTO_SHIFT";
                #binding-cells = <2>;
                tapping_term_ms = <180>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                //hold-trigger-key-positions = <0>;    
                bindings = <&kp>, <&kp>; 
            };

        mtg: mod_tap_game {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_GAME";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1>;    // <---[[the W key]]
        };
    };
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE LEFT RIGHT LS(FSLH) FSLH>;
};


/{
    keymap {
        compatible = "zmk,keymap";

        default_layer {

            bindings = <
                &kp ESC         &mt LS(F12) F12 &as LS(W) W &as LS(F) F   &as LS(P) P     &as LS(B) B                                       &as LS(J) J &as LS(L) L         &as LS(U) U         &as LS(Z) Z     &as LC(G) LC(F)                 &kp LC(HOME)
                &kp LSHFT       &as LS(Q) Q     &as LS(R) R &as LS(S) S   &as LS(T) T     &as LS(G) G                                       &as LS(M) M &as LS(N) N         &as LS(E) E         &as LS(I) I     &as LS(NON_US_HASH) NON_US_HASH &kp LC(END)
                &as LS(TAB) TAB &as LS(A) A     &as LS(X) X &as LS(C) C   &as LS(D) D     &as LS(V) V  &kp LS(LC(LALT))     &caps_word            &as LS(K) K     &as LS(H) H   &as LS(COMMA) COMMA &as LS(DOT) DOT    &as LS(O) O                    &as LC(RET) RET
                &kp LCTRL       &as LS(Y) Y     &kp LGUI    &kp LG(LS(S)) &mt LALT ESC  &lt 1 SPACE   &kp BSPC         &mt LSHIFT DELETE     &lt 2 SPACE &as LS(FSLH) FSLH   &kp LEFT            &kp UP          &kp DOWN                        &kp RIGHT
            >;
        };

        left_layer {
          
            bindings = <
                &none               &none            &as LS(MINUS) MINUS &as LS(SEMI) SEMI &as LS(LBKT) LBKT  &kp RA(RBKT)                          &none           &none           &kp UP      &kp LS(MINUS)   &none                  &kp LS(KP_PLUS)
                &kp LC(X)           &as LS(SQT) SQT  &kp LS(N1)          &kp RA(Q)         &kp LS(N6)         &kp LS(N5)                            &kp PAGE_UP     &kp LEFT        &kp DOWN    &kp RIGHT       &as EQUAL LS(EQUAL)    &none
                &kp LC(C)           &kp LSHIFT       &kp GRAVE           &trans            &kp LC(LS(TAB))    &kp LC(TAB)        &none  &none       &kp PAGE_DOWN   &kp LS(N4)      &kp RA(E)   &kp LS(N3)      &kp LS(RBKT)           &none
                &as LS(LC(V)) LC(V) &kp LCTRL        &kp RET              &none             &kp LC(LS(P))          &trans         &none  &kp K_APP   &mo 2           &kp LALT        &trans      &trans          &trans                 &trans 
                                                                                        
            >;
        };

        right_layer {
         
            bindings = <
                &trans   &none               &as LS(N2) LS(NON_US_HASH)  &kp RA(N8)          &kp RA(N9)         &none                                   &kp KP_ASTERISK     &kp N7     &kp N8       &kp N9      &kp KP_MINUS   &kp KP_NUMLOCK
                &trans   &kp RA(NON_US_BSLH) &kp LS(NON_US_BSLH)         &kp LS(N8)          &kp LS(N9)         &kp LS(N0)                              &kp KP_SLASH        &kp N4     &kp N5       &kp N6      &kp KP_PLUS    &kp LC(KP_PLUS)
                &trans   &kp NON_US_BSLH     &none                       &as RA(N7) RA(MINUS) &as RA(N0) LS(N7) &none    &kp LC(FSLH) &kp LC(KP_PLUS)  &kp N0              &kp N1     &kp N2       &kp N3      &as COMMA DOT  &kp LC(FSLH)
                &trans   &none               &none                       &none                &kp LALT          &mo 1    &none         &none           &lt 2 SPACE          &caps_word      &kp COMMA    &kp DOT       &kp COMMA       &none
            >;
        };

        both_layer {

            bindings = <
                &kp F6 &kp F7 &kp F8            &kp F9  &kp F10       &kp  F11                               &bt BT_CLR  &line_select        &kp LC(HOME)    &kp LS(END)         &none           &none
                &none  &none   &mt LC(F2) F2    &kp F3  &kp F4        &kp F5                                 &out OUT_TOG   &kp LS(LC(LEFT))    &kp LC(END)     &kp LS(LC(RIGHT))   &none           &none
                &none  &kp F1  &none            &none   &kp LA(LEFT)  &kp LA(RIGHT) &to 4   &kp CAPSLOCK     &none       &bt BT_SEL 0        &bt BT_SEL 1    &bt BT_SEL 2        &bt BT_SEL 3    &bt BT_SEL 4
                &none  &none   &none            &none   &none         &trans        &sys_reset    &bootloader    &trans      &none               &none           &none               &none           &none
                                                                   
            >;
        };

        gaming_layer {

            bindings = <
                &kp ESC   &kp N1  &kp N2   &kp N3     &kp N4      &kp N5                      &kp F1      &kp F2   &kp F5     &kp F9 &kp F10  &to 0
                &kp TAB   &kp Q   &kp W    &kp E      &kp R       &kp T                          &kp M       &none      &kp Q       &kp UP      &kp E       &kp ENTER 
                &kp LSHFT &kp A   &kp S    &kp D      &kp F       &kp G    &kp J    &kp U        &kp Y      &kp LSHFT   &kp LEFT    &kp DOWN    &kp RIGHT   &kp ENTER
                &kp LCTRL &kp Y   &kp X    &mtg LALT C &kp SPACE  &lt 5 V   &kp K    &kp I      &none       &kp LCTRL   &kp Z       &kp X       &mtg LALT C &kp SPACE
                                          
            >;
        };

        gaming_layer2 {
            bindings = <
                &none       &kp M   &kp N   &kp O    &kp P  &kp B                           &kp F1        &kp F2   &kp F3   &kp F4  &kp F5   &to 0
                &kp J       &kp K   &kp N8  &kp L    &kp B  &none                           &kp F6       &kp F7   &kp F8   &kp F9    &kp F10  &none
                &kp M       &kp N7  &kp N0  &kp N9    &none  &none   &none    &none         &none       &none    &none    &none   &none    &none
                &kp N6      &none   &none   &none    &none  &none   &none    &none          &none       &none     &trans  &trans  &trans &trans
                                          
            >;
        };
    };
};